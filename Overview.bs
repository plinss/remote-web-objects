<h1>Remote Web Objects</h1>

<pre class='metadata'>
Shortname: remote-web-api
Level: 1
Status: w3c/ED
Group: tbd
ED: tbd
Work Status: exploring
Editor: Peter Linss <w3c@linss.com>
Abstract: This specification describes a system for creating dynamically loadable Javascript objects that are implemented as remote procedure calls over HTTP.
Ignored Terms:
</pre>

<pre class='biblio'>
{
  "json-home": {
    "authors": [
      "M. Nottingham"
    ],
    "href": "http://tools.ietf.org/html/draft-nottingham-json-home-06",
    "title": "Home Documents for HTTP APIs",
    "status": "draft",
    "publisher": "IETF"
  },
  "json-patch": {
    "authors": [
      "P. Bryan",
      "M. Nottingham"
    ],
    "href": "http://tools.ietf.org/html/rfc6902",
    "title": "JavaScript Object Notation (JSON) Patch",
    "status": "proposed standard",
    "publisher": "IETF"
  }
}
</pre>
<pre class=link-defaults>
spec:url; type:dfn; for:URL; text:url
</pre>
<pre class="anchors">
url: https://tc39.github.io/ecma262/#sec-promise-objects; type: dfn; text: promise
url: https://tc39.github.io/ecma262/#sec-objects; type: dfn; text: object
url: http://tools.ietf.org/html/draft-nottingham-json-home-06#section-4; type: dfn; text: resource object
</pre>

# Introduction # {#intro}

<em>This section is not normative.</em>

TODO: Intro goes here.


# Accessing a Remote Web Object # {#access-api}

<pre class=idl>
partial interface Window {
  Promise&lt;RemoteWebObject>  fetchRemoteObject(USVString url, optional RemoteWebObjectOptions options);
};

interface RemoteWebObject {
  // defined by server
};

dictionary RemoteWebObjectOptions {
  USVString version;
  USVString username;
  USVString password;
  RequestCredentials credentials;
};
</pre>

The {{Window/fetchRemoteObject()}} function fetches a Remote Web Object Document from the specified <a>URL</a>.
The function returns a <a>Promise</a> that,
when a valid Remote Web Object Document is retrieved,
is resolved with a live JavaScript <a>Object</a> that contains the state and implements the functions defined in the Remote Web Object Document.
If the fetch fails, the Promise is rejected with the error information.

The {{Window/fetchRemoteObject()}} function may be called with an optional version string and authentication credentials.
The version string allows retrieval of a specific version of the Remote Web Object Document.
If a version string is supplied,
the HTTP Accept header of the fetch request will be set to <code>application/&lt;version-string>+json-remote</code>,
otherwise the Accept header of the fetch request will be set to <code>application/json-remote</code>.

If supplied, the authentication credentials will be used during the initial fetch of the Remote Web Object Document and each remote procedure call made via the RemoteWebObject.

# Remote Web Object Documents # {#remote-web-object}

RemoteWebObjects are defined by a superset of a Home Document for HTTP APIs defined in [[!json-home]].
A Home Document for HTTP APIs defines a set of HTTP API resources,
the Remote Web Object Document extensions define a set of JavaScript functions that are mapped to each API Resource,
server-sent events provided by the HTTP API,
and optional state information.

When a Remote Web Object Document is processed in repsonse to an {{Window/fetchRemoteObject()}} call,
these functions, event handlers, and state are exposed in the returned JavaScript RemoteWebObject as functions and attributes of that object.

The functions exposed in the RemoteWebObject object are implemented as remote procedure calls over HTTP to the corresponding API Resource.

Remote Web Object Documents use the media type of "application/json-remote" or the structural suffix of "+json-remote" to allow versioned APIs.
NOTE: this media type is not final and will likely change.

The Remote Web Object Document extentions to an API Home Document are as follows:

<pre class=json>
{
  "resources": {
    "&lt;resource-name>": {
      ...,
      "<a href=#functions>functions</a>": {
        "&lt;functon-name1>": {
          "<a href=#function-arguments>arguments</a>": ["&lt;argument-name1>", "&lt;argument-name2>", "..."],
          "<a href=#function-method>method</a>": "PUT",
          "<a href=#function-format>format</a>": "application/json",
          "<a href=#function-request-format>requestFormat</a>": "application/json",
          "<a href=#function-request-body>requestBody</a>": ["&lt;argument-name2>", "&lt;variable-name2>"],
          "<a href=#function-defaults>defaults</a>": {
            "&lt;variable-name1>": &lt;value>,
            "&lt;variable-name2>": &lt;value>
          }
        },
        "&lt;function-name2>": {
          ...
        }
      },
      "<a href=#events>events</a>": {
        "&lt;event-type1>": {
          ...
        },
        "&lt;event-type2>": {
          ...
        }
      }
    }
  },
  "<a href=#object-state>state</a>": {
    "<a href=#object-state-public>public</a>": {
      "&lt;public-variable-name>": &lt;value>
    },
    "<a href=#object-state-readonly>readonly</a>": {
      "&lt;readonly-variable-name>": &lt;value>
    },
    "<a href=#object-state-private>private</a>": {
      "&lt;private-variable-name>": &lt;value>
    }
  }
}
</pre>

## Function definitions ## {#functions}

Functions are defined via an optional "functions" property within a <a>Resource Object</a>.

Each function definition may contain the following members:
: <a href=#function-arguments>"arguments"</a>
:: specifies the mapping of the function's arguments to the variables defined for the HTTP API Resource.
: <a href=#function-method>"method"</a>
:: the HTTP method to use when calling the HTTP API.
: <a href=#function-format>"format"</a>
:: the format of the acceptable response.
: <a href=#function-request-format>"requestFormat"</a>
:: the format of the request body, if required.
: <a href=#function-request-body>"requestBody"</a>
:: the arguments and state information provided in the request body.
: <a href=#function-defaults>"defaults"</a>
:: an optional set of default values for the HTTP API Resource variables or request body.

Functions return a <a>Promise</a> that resolves with the value returned from the HTTP remote procedure call.

The following is an example of an HTTP API Resource that provides a password hashing service and defines two functions:
<pre class='json example'>
{
  "resources": {
    "password": {
      "hrefTemplate": "https://api.example.com/password/{?cleartext,algorithm,salt,rounds}",
      "hrefVars": {
        "cleartext": "param/password/cleartext",
        "algorithm": "param/password/algorithm",
        "salt": "param/password/salt",
        "rounds": "param/password/rounds"
      },
      "hints": {
        "allow": ["GET"],
        "formats": {
          "application/json": {},
          "application/prs.example.password.v1+json": {}
        }
      },
      "<a href=#functions>functions</a>": {
        "getAlgorithms": {
          "<a href=#function-arguments>arguments</a>": [],
          "<a href=#function-method>method</a>": "GET",
          "<a href=#function-format>format</a>": "application/prs.example.password.v1+json"
        },
        "hashPassword": {
          "<a href=#function-arguments>arguments</a>": ["cleartext", "algorithm", "salt", "rounds"],
          "<a href=#function-method>method</a>": "GET",
          "<a href=#function-format>format</a>": "application/prs.example.password.v1+json",
          "<a href=#function-defaults>defaults</a>": {
            "algorithm": "bcrypt"
          }
        }
      }
    }
  }
}
</pre>

Processing this Remote Web Object Document will result in a RemoteWebObject equivalent to the following interface:
<pre class='example'>
interface Password {
  Promise&lt;sequence&lt;USVString>>  getAlgorithms();
  Promise&lt;USVString>            hashPassword(USVString cleartext, USVString algorithm, USVString salt, long rounds);
};
</pre>


### Function Arguments ### {#function-arguments}

A function may optionally define an array of arguments.
Each argument in the array provides a mapping from a positional argument of the function to a named variable of the API resource.
The position of the argument in the function call correlates directly to the index of the argument name in the array.

Values of arguments passed to the function and mapped to API resource variables
will be included in the processing of the resource's hrefTemplate when computing the URL to use for the HTTP remote procedure call.
Arguments not consumed by the hrefTemplate are available to be used for the request body of the HTTP remote procedure call.

If not defined, or if defined as an empty array, the function will take no arguments.

Variadic functions may be defined by terminating the array of arguments with the value "...".
Any argument names following a value of "..." are an error and will be ignored.
Arguments passed to a variadic function after the last named argument (all arguments if no named arguments are present)
will be available as an array referenced in the hrefTemplate or object state by the name "...".


### HTTP Method ### {#function-method}

The function's method defines the HTTP method to be used when making the HTTP remote procedure call.
If the resource provides an "allow" hint, the supplied method SHOULD be one of the allowed methods.

If not specified, the default value will be the first specified value of the resource's "allow" hint.
If the resource does not specify an "allow" hint, the default value will be <code>GET</code>.

### Response Format ### {#function-format}

The function's format defines the value of the HTTP Accept header used when making the HTTP remote procedure call.
If the resource provides a "formats" hint, the supplied format SHOULD be one of the specified formats.

If not specified, the default value will be the first specified value of the resource's "formats" hint.
If the resource does not specify a "formats" hint, the default value will be <code>application/json</code>.


### Request Format ### {#function-request-format}

Functions that make an HTTP remote procedure call with the <code>POST</code> or <code>PUT</code> HTTP methods may send data in the request body.
The value of the "requestFormat" will be used as the Content-Type header of the HTTP request.

The value of "requestFormat" SHOULD match a value specified in the resource's "acceptPost" or "acceptPut" members.

If the "requestFormat" is specified as <code>application/json</code> or uses the "+json" structural suffix,
the request body will be sent in JSON format.
Alternatively the request body may be sent as multi-part form data via the "requestFormat" of <code>multipart/form-data</code>,
or url encoded via the "requestFormat" of <code>application/x-www-form-urlencoded</code>.
Other request formats are unspecified at this time.

If not specified, the default value will be the first specified value of "acceptPost" or "acceptPut", depending on the HTTP method,
or <code>multipart/form-data</code> for <code>POST</code> methods,
and <code>application/json</code> for <code>PUT</code> methods if "acceptPost" or "acceptPut" is not specified.


### Request Body ### {#function-request-body}

Any defined function arguments and object state that are not used by the hrefTemplate will be sent as the request body of <code>PUT</code> or <code>POST</code> HTTP remote procedure calls.
Instead of sending all unused arguments and object state, the function may optionally specify an array of value names.
If specified, the "requestBody" will limit the contents of the request body to the values of the arguments or object state specified in the array. If the array is empty, the request body will be empty.

If not specified, all defined arguments and object state that have not been consumed by the hrefTemplate will be sent as the request body.

### Default Values ### {#function-defaults}

Default values specify the values to use for the variables of the API resource if not provided in the function call or object state.

In the above example Remote Web Object Document,
if the function <code>hashPassword("123456")</code> is called,
it will be equivalent to <code>hashPassword("123456", "bcrypt")</code>.


## Event Definitions ## {#events}

Events are defined via an optional "events" property within a <a>Resource Object</a>.

Each event definition may contain the following members:
: <a href=#function-method>"method"</a>
:: the HTTP method to use when calling the HTTP API.
: <a href=#function-request-format>"requestFormat"</a>
:: the format of the request body, if required.
: <a href=#function-request-body>"requestBody"</a>
:: the arguments and state information provided in the request body.
: <a href=#function-defaults>"defaults"</a>
:: an optional set of default values for the HTTP API Resource variables or request body.

The response format will always be "text/event-stream".
The members of the event definition are processed in the same manner as the members of a function definition.

When any API resource defines one or more events,
the RemoteWebObject inherits the <a>EventTarget</a> interface and contains one attribute per event type with the name "on&lt;event type>".

When the first event listener is set for a given API resource,
a single <a>EventSource</a> connection is established to the API resource's href or hrefTemplate.
The hrefTemplate is resolved with the current state and specified defaults of the RemoteWebObject.
Additional event listeners for the same API resource will re-use the same <a>EventSource</a>.

When the last event listener is removed for a given API resource,
the <a>EventSource</a> for that API resource is closed.

Setting an event listener via the "on&lt;event type>" attribute is equivalent to removing any current listener,
then adding the new listener.
Therefore resetting a single event listener via the "on&lt;event type>" attribute will close, then re-open the <a>EventSource</a>.
The current state of the RemoteWebObject will be used to re-evaluate the hrefTemplate of the <a>EventSource</a> when re-opening.

The following is an example of an HTTP API Resource that provides an event at specified intervals:
<pre class='json example'>
{
  "resources": {
    "tick": {
      "hrefTemplate": "https://api.example.com/tick/{?interval}",
      "hrefVars": {
        "interval": "param/tick/interval"
      },
      "<a href=#events>events</a>": {
        "tick": {}
      }
    }
  },
  "state": {
    "public": {
      "interval": 1000
    }
  }
}
</pre>

Processing this Remote Web Object Document will result in a RemoteWebObject equivalent to the following interface:
<pre class='example'>
interface Tick : EventTarget {
  attribute ontick;
  attribute interval;
};
</pre>


## Object State ## {#object-state}

Remote Web Object Documents may also define state information contained in the RemoteWebObject.
State information contained in the RemoteWebObject will be included in the processing of the API resource's "hrefTemplate" when computing the URL to use for the HTTP remote procedure call.
State information not consumed by the hrefTemplate is available to be used for the request body of the HTTP remote procedure call.

State information is provided via a "state" member in the root of the Remote Web Object Document.
The state values may contain "public", "readonly", and "private" members to define public, read only, and private state information respectively.
Public and read only state will be visible as attributes and read only attributes of the RemoteWebObject.
Private state is not visible to code using the RemoteWebObject,
but is available to be used in HTTP remote procedure calls.

It is an error to have members with the same name within public, readonly, and private state.
In the event of name collisions,
members of readonly state that conflict with members of private state will be ignored,
members of public state that conflict with members of readonly state or private state will be ignored.

<pre class='json example'>
{
  "resources": { ... },
  "state": {
    "public": {
      "input": "input data"
    },
    "readonly": {
      "output": "output data"
    },
    "private": {
      "id": 42
    }
  }
}
</pre>

Processing the above example will result in a RemoteWebObject equivalent to the following:
<pre class=example>
interface Example {
  attribute USVString           input;
  readonly attribute USVString  output;
};
</pre>


### Public State ### {#object-state-public}

Members of the public state object will be made available as regular attributes of the RemoteWebObject.
These members may be modified or deleted by code using the object.

If code using the object adds additional attributes they will be considered public state and will be available when processing remote procedure calls.


### Read Only State ### {#object-state-readonly}

Members of the readonly state object will be made available as read only attributes of the RemoteWebObject.
These members may not be modified or deleted by code using the object.


### Private State ### {#object-state-private}

Members of the private state object are only avaiable when processing remote procedure calls.


# Implementation of RemoteWebObject # {#implementation}

## Function Implementaion ## {#function-implementation}

All functions of a RemoteWebObject are implemented as HTTP remote procedure calls using the following algorithm:

1. Let <code>resource</code> be the object from the Remote Web Object Document defining the API resource.

2. Let <code>func</code> be the object from <code>resource</code> defining the function.

3. Let <code>args</code> be a new, empty object.

4. If the <code>func</code> object has a "defaults" member, copy the members of <code>func["defaults"]</code> to <code>args</code>.

5. Copy the public attributes of the RemoteWebObject to <code>args</code>, in the case of collisions, overwrite the existing value.

6. Copy the read only attribtues of the RemoteWebObject to <code>args</code>, in the case of collisions, overwrite the existing value.

7. Copy the private attribtues of the RemoteWebObject to <code>args</code>, in the case of collisions, overwrite the existing value.

8. If the <code>func</code> object has an "arguments" member, do the following:

    1. For value in <code>func.arguments</code> as <code>arg</code>.

    2. Let <code>index</code> be the index of the value.

    3. If <code>index</code> exceeds the number of arguments passed to the function exit the loop.

    4. If the value of <code>arg</code> is "...", create an array containing the values of all arguments passed to the function beginning at <code>index</code>, add the array to <code>args</code> as a member with the name "...", and exit the loop.

    5. Add the value of the argument passed to the function at <code>index</code> to <code>args</code> as <code>args[arg]</code>, in the case of collisions, overwrite the existing value.

9. If <code>resource</code> has a "hrefTemplate" member,
    let <code>url</code> be the resolved value of the templated link using the values from <code>args</code>,
    else if <code>resource</code> has an "href" member, let <code>url</code> be the value of <code>resource.href</code>,
    else let <code>url</code> be "".

10. If <code>url</code> is a relative URL or an empty string, let <code>url</code> be the absolute URL computed with the value of <code>url</code> and the URL that the Remote Web Object Document was retrieved from as the base.

11. If <code>func</code> has a "method" member, let <code>method</code> be the value of <code>func.method</code>,
    else if <code>resource</code> has a "hints.allow" member, let <code>method</code> be the first value of <code>resource.hints.allow</code>,
    else let <code>method></code> be "GET".

12. If the value of <code>method</code> is "PUT" or "POST", do the following:

    1. For each variable used in the resolution of the "hrefTemplate", delete that member from <code>args</code>.

    2. If the <code>func</code> object has a member "requestBody", remove all members from <code>args</code> that are not listed in <code>func["requestBody"]</code>.

    3. If <code>func</code> has a "requestFormat" member, let <code>requestFormat</code> be the value of <code>func.requestFormat</code>,
        otherwise do the following:

        1. If the value of <code>method</code> is "POST", then if <code>resource</code> has a "hints.acceptPost" member,
            let <code>requestFormat</code> be the first value of <code>resource.hints.acceptPost</code>,
            else let <code>requestFormat</code> be "multipart/form".

        2. If the value of <code>method</code> is "PUT", then if <code>resource</code> has a "hints.acceptPut" member,
            let <code>requestFormat</code> be the first value of <code>resource.hints.acceptPut</code>,
            else let <code>requestFormat</code> be "applicaiton/json".

    4. If the value of <code>requestFormat</code> is not "application/json", perform a recursive flattening of <code>args</code>.
        If a member of <code>args</code> is an array, replace the member with a set of members named <code>&lt;member-name>[&lt;index>]</code> for each item in the array.
        If a member of <code>args</code> is an object, replace the member with a set of memberd named <code>&lt;member-name>[&lt;item-name>]</code> for each item in the object.

    5. If the value of <code>requestFormat</code> is "application/x-www-form-urlencoded", let <code>body</code> be the contents of <code>args</code> in url encoded form format,
        else if the value of <code>requestFormat</code> is "multipart/form", let the <code>body</code> be the the contents of <code>args</code> in mulitpart/form format,
        else if the value of <code>requestFormat</code> is "application/json" or uses the "+json" structural suffix, let the <code>body</code> be the content of <code>args</code> in JSON encoding.

13. If <code>func</code> has a "format" member, let <code>accept</code> be the value of <code>func.format</code>,
    else, if <code>resource</code> has a "formats" memeber, let <code>accept</code> be the first value of <code>resource.formats</code>,
    else, let <code>accept</code> be "application/json".

14. Perform an asynchronous HTTP fetch of <code>url</code> using the authentication credentials and flags provided in the oringal <a>fetchRemoteObject()</a> call,
    using the HTTP method of <code>method</code>,
    setting the "Accept" header to the value of <code>accept</code>,
    if <code>method</code> is "POST" or "PUT", set the "Content-Type" header to <code>requestFormat</code> and the request body to the value of <code>body</code>.

15. Return a new <a>Promise</a>.

16. If the HTTP fetch completes with a status of 200, process the response per the section below and resolve the returned Promise with the return value,
    otherwise reject the returned Promise with the HTTP error information.


### Function Return Value ### {#function-return}

The return value of a RemoteWebObject function depends on the HTTP response of the server.

1. If the Content-Type of the HTTP response is "application/json" or uses the "+json" structural suffix,
    then the return value is the JSON decoded value of the response.

2. If the Content-Type of the HTTP response is "application/json-remote" or uses the "+json-remote" structural suffix,
    the the return value is a new instance of a RemoteWebObject created based on the returned Remote Web Object Document.

3. If the Content-Type of the HTTP response if "application/json-patch+json",
    then the response JSON Patch document is applied to the state of the RemoteWebObject per [[!JSON-Patch]],
    if the JSON Patch document creates a top-level member named "return", the value of that member is returned.

When applying a JSON Patch to the RemoteWebObject, the path of each operation MUST begin with
"/public/", "/readonly/", "/private/", or "/return/" to address the respective area of the RemoteWebObject's state or the function return data.


## Event Implementation ## {#event-implementation}

When a server-sent event is received corresponding to an event type with a registered listener,
a new RemoteEvent object will be created and sent to the appropriate event listeners.

The target of the RemoteEvent will be the RemoteWebObject.
The "id" attribute of the server sent event will be reflected in the RemoteEvent.id attribute.

If the server-sent event contains a "data" attribute, it will be processed according to the following algorithm:

1. Let <code>data</code> be the value of the server-sent event's "data" attribute.

2. If the value of <code>data</code> is valid JSON, decode it.

3. If the decoded value of <code>data</code> is an object, copy the attributes of <code>data</code> to the RemoteEvent as readonly attributes.

4. If the RemoteEvent did not acquire a <code>data</code> atrribute in step 3:

  1. If <code>data</code> was valid JSON, add a readonly attibute named "data" with the decoded value of <code>data</code>.

  2. If <code>data</code> was not valid JSON, add a readonly attibute named "data" with the original value of <code>data</code>.
